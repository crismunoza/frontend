import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Output, Input, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';

class RutService {
    constructor() {
        this._subject = new Subject();
    }
    clearInputService(event) {
        this._subject.next(event);
    }
    get events$() {
        return this._subject.asObservable();
    }
    rutFormat(value) {
        const rut = this.rutClean(value);
        if (rut.length <= 1) {
            return;
        }
        let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;
        for (let i = 4; i < rut.length; i += 3) {
            result = `${rut.slice(-3 - i, -i)}.${result}`;
        }
        return result;
    }
    rutClean(value) {
        return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';
    }
    validaRUT(rut) {
        let valor = rut;
        valor = this.rutClean(valor);
        // Aislar Cuerpo y Dígito Verificador
        const cuerpo = valor.slice(0, -1);
        let dv = valor.slice(-1).toUpperCase();
        // Si no cumple con el mínimo ej. (n.nnn.nnn)
        if (cuerpo.length < 7 && cuerpo.length >= 0) {
            return true;
        }
        // Calcular Dígito Verificador
        let suma = 0;
        let multiplo = 2;
        // Para cada dígito del Cuerpo
        for (let i = 1; i <= cuerpo.length; i++) {
            // Obtener su Producto con el Múltiplo Correspondiente
            const index = multiplo * Number(valor.charAt(cuerpo.length - i));
            // Sumar al Contador General
            suma = suma + index;
            // Consolidar Múltiplo dentro del rango [2,7]
            if (multiplo < 7) {
                multiplo = multiplo + 1;
            }
            else {
                multiplo = 2;
            }
        }
        // Calcular Dígito Verificador en base al Módulo 11
        const dvEsperado = 11 - (suma % 11);
        // Casos Especiales (0 y K)
        dv = dv === 'K' ? '10' : dv;
        dv = dv === '0' ? '11' : dv;
        // Validar que el Cuerpo coincide con su Dígito Verificador
        if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {
            return true;
        }
        else {
            return false;
        }
    }
    getRutChile(mode, rut) {
        if (!this.validaRUT(rut)) {
            switch (mode) {
                // el rut limpio 184215551
                case 0:
                    return this.rutClean(rut);
                // solo el cuerpo del rut  18421555
                case 1:
                    let valor = rut;
                    valor = this.rutClean(valor);
                    let cuerpo = valor.slice(0, -1);
                    return cuerpo;
                // rut formateado 18.421.555-1
                case 2:
                    return this.rutFormat(rut);
                // rut cuerpo - digitov : 18421555-1  
                case 3:
                    let r = rut;
                    r = this.rutClean(r);
                    const c = r.slice(0, -1);
                    let dv = r.slice(-1).toUpperCase();
                    return c + '-' + dv;
                case 4:
                    let ru = rut;
                    ru = this.rutClean(ru);
                    let div = ru.slice(-1).toUpperCase();
                    return div;
            }
        }
        else {
            return false;
        }
    }
    validaRutForm(control) {
        if (control.value == null || control.value === 'undefined' || control.value === "") {
            // TODO: RETORNA TRUE YA QUE LA IDEA ES USAR Validators.required
            return null;
        }
        else {
            let rut = control.value;
            let valor = (rut || '').replace(/[^0-9kK]+/g, '').toUpperCase();
            // Aislar Cuerpo y Dígito Verificador
            const cuerpo = valor.slice(0, -1);
            let dv = valor.slice(-1).toUpperCase();
            // Si no cumple con el mínimo ej. (n.nnn.nnn)
            if (cuerpo.length < 7 && cuerpo.length >= 0) {
                return {
                    rutnovalido: true
                };
            }
            // Calcular Dígito Verificador
            let suma = 0;
            let multiplo = 2;
            // Para cada dígito del Cuerpo
            for (let i = 1; i <= cuerpo.length; i++) {
                // Obtener su Producto con el Múltiplo Correspondiente
                const index = multiplo * Number(valor.charAt(cuerpo.length - i));
                // Sumar al Contador General
                suma = suma + index;
                // Consolidar Múltiplo dentro del rango [2,7]
                if (multiplo < 7) {
                    multiplo = multiplo + 1;
                }
                else {
                    multiplo = 2;
                }
            }
            // Calcular Dígito Verificador en base al Módulo 11
            const dvEsperado = 11 - (suma % 11);
            // Casos Especiales (0 y K)
            dv = dv === 'K' ? '10' : dv;
            dv = dv === '0' ? '11' : dv;
            // Validar que el Cuerpo coincide con su Dígito Verificador
            if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {
                return {
                    rutnovalido: true
                };
            }
            else {
                return null;
            }
        }
    }
    getRutChileForm(mode, rut) {
        switch (mode) {
            case 0: // el rut limpio 184215551
                return this.rutClean(rut);
            case 1: // rut formateado 18.421.555-1
                return this.rutFormat(rut);
            case 2: // rut cuerpo - digitov : 18421555-1 
                let r = rut;
                r = this.rutClean(r);
                const c = r.slice(0, -1);
                let dv = r.slice(-1).toUpperCase();
                return c + '-' + dv;
        }
    }
    isRutEmpy(rut) {
        return rut === '' || rut === null || rut === undefined;
    }
}
RutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class RutComponent {
    constructor(rutService) {
        this.rutService = rutService;
        this.rut_emiter = new EventEmitter();
        this.obligatorio = false;
    }
    ngOnInit() {
        this.rutService.events$.forEach(event => {
            if (event) {
                this.rut_chileno = '';
                this.rut_emiter.emit(this.rut_chileno);
            }
        });
        if (!this.msjError)
            this.msjE = "El rut ingresado no es válido.";
        else
            this.msjE = this.msjError;
    }
    isRutObligatorio() {
        if (!this.obligatorio) {
            this.validacionRut = false;
            this.rut_emiter.emit(undefined);
        }
    }
    isRutEmpy(rut) {
        return rut === '' || rut === null || rut === undefined;
    }
    rutFormat(event) {
        const target = event.target;
        const rut = this.rutClean(target.value);
        if (rut.length <= 1) {
            return;
        }
        let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;
        for (let i = 4; i < rut.length; i += 3) {
            result = `${rut.slice(-3 - i, -i)}.${result}`;
        }
        this.rut_chileno = result;
        if (this.isRutEmpy(target.value))
            this.isRutObligatorio();
    }
    rutClean(value) {
        return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';
    }
    validaRUT(event) {
        const target = event.target;
        this.validacionRut = this.validaRUT_(target.value);
        this.rutFormat(event);
        this.sendEmiterRut(this.rut_chileno);
        if (this.isRutEmpy(target.value))
            this.isRutObligatorio();
    }
    validaRUT_(rut) {
        let valor = rut;
        valor = this.rutClean(valor);
        const cuerpo = valor.slice(0, -1);
        let dv = valor.slice(-1).toUpperCase();
        if (cuerpo.length < 7 && cuerpo.length >= 0) {
            return true;
        }
        let suma = 0;
        let multiplo = 2;
        for (let i = 1; i <= cuerpo.length; i++) {
            const index = multiplo * Number(valor.charAt(cuerpo.length - i));
            suma = suma + index;
            if (multiplo < 7) {
                multiplo = multiplo + 1;
            }
            else {
                multiplo = 2;
            }
        }
        const dvEsperado = 11 - (suma % 11);
        dv = dv === 'K' ? '10' : dv;
        dv = dv === '0' ? '11' : dv;
        if (dvEsperado.toString() !== dv && cuerpo.length >= 0)
            return true;
        else
            return false;
    }
    sendEmiterRut(rut) {
        if (!this.validacionRut) {
            switch (this.mode) {
                case 0:
                    this.rut_emiter.emit(this.rutClean(rut));
                    break;
                case 1:
                    let valor = rut;
                    this.rut_emiter.emit(this.rutClean(valor).slice(0, -1));
                    break;
                case 2:
                    this.rut_emiter.emit(rut);
                    break;
                case 3:
                    let r = rut;
                    this.rut_emiter.emit(this.rutClean(r).slice(0, -1) + '-' + r.slice(-1).toUpperCase());
                    break;
                case 4:
                    let ru = rut;
                    this.rut_emiter.emit(this.rutClean(ru).slice(-1).toUpperCase());
                    break;
            }
        }
        else {
            this.rut_emiter.emit(undefined);
        }
    }
}
RutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutComponent, deps: [{ token: RutService }], target: i0.ɵɵFactoryTarget.Component });
RutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: RutComponent, selector: "rut-chile", inputs: { mode: "mode", msjError: "msjError", obligatorio: "obligatorio" }, outputs: { rut_emiter: "rut_emiter" }, ngImport: i0, template: `
  <input type="text"
  [(ngModel)] = "rut_chileno"
  (focus)="rutFormat($event)"
  (keydown)="rutFormat($event)"
  (keypress)="rutFormat($event)"
  (keyup)="validaRUT($event)"
  (blur)="validaRUT($event)"
  class="input-rut rut" name="username" id="rut_chileno" placeholder="Rut">
  <small class="danger-rut" [hidden]="!validacionRut">
      {{msjE}}
  </small>
  `, isInline: true, directives: [{ type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rut-chile',
                    template: `
  <input type="text"
  [(ngModel)] = "rut_chileno"
  (focus)="rutFormat($event)"
  (keydown)="rutFormat($event)"
  (keypress)="rutFormat($event)"
  (keyup)="validaRUT($event)"
  (blur)="validaRUT($event)"
  class="input-rut rut" name="username" id="rut_chileno" placeholder="Rut">
  <small class="danger-rut" [hidden]="!validacionRut">
      {{msjE}}
  </small>
  `,
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: RutService }]; }, propDecorators: { rut_emiter: [{
                type: Output
            }], mode: [{
                type: Input
            }], msjError: [{
                type: Input
            }], obligatorio: [{
                type: Input
            }] } });

class RutModule {
}
RutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
RutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutModule, declarations: [RutComponent], imports: [FormsModule], exports: [RutComponent] });
RutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutModule, imports: [[
            FormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        RutComponent
                    ],
                    imports: [
                        FormsModule
                    ],
                    exports: [
                        RutComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of rut
 */

/**
 * Generated bundle index. Do not edit.
 */

export { RutComponent, RutModule, RutService };
//# sourceMappingURL=rut-chileno.mjs.map
