import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./rut.service";
import * as i2 from "@angular/forms";
export class RutComponent {
    constructor(rutService) {
        this.rutService = rutService;
        this.rut_emiter = new EventEmitter();
        this.obligatorio = false;
    }
    ngOnInit() {
        this.rutService.events$.forEach(event => {
            if (event) {
                this.rut_chileno = '';
                this.rut_emiter.emit(this.rut_chileno);
            }
        });
        if (!this.msjError)
            this.msjE = "El rut ingresado no es válido.";
        else
            this.msjE = this.msjError;
    }
    isRutObligatorio() {
        if (!this.obligatorio) {
            this.validacionRut = false;
            this.rut_emiter.emit(undefined);
        }
    }
    isRutEmpy(rut) {
        return rut === '' || rut === null || rut === undefined;
    }
    rutFormat(event) {
        const target = event.target;
        const rut = this.rutClean(target.value);
        if (rut.length <= 1) {
            return;
        }
        let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;
        for (let i = 4; i < rut.length; i += 3) {
            result = `${rut.slice(-3 - i, -i)}.${result}`;
        }
        this.rut_chileno = result;
        if (this.isRutEmpy(target.value))
            this.isRutObligatorio();
    }
    rutClean(value) {
        return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';
    }
    validaRUT(event) {
        const target = event.target;
        this.validacionRut = this.validaRUT_(target.value);
        this.rutFormat(event);
        this.sendEmiterRut(this.rut_chileno);
        if (this.isRutEmpy(target.value))
            this.isRutObligatorio();
    }
    validaRUT_(rut) {
        let valor = rut;
        valor = this.rutClean(valor);
        const cuerpo = valor.slice(0, -1);
        let dv = valor.slice(-1).toUpperCase();
        if (cuerpo.length < 7 && cuerpo.length >= 0) {
            return true;
        }
        let suma = 0;
        let multiplo = 2;
        for (let i = 1; i <= cuerpo.length; i++) {
            const index = multiplo * Number(valor.charAt(cuerpo.length - i));
            suma = suma + index;
            if (multiplo < 7) {
                multiplo = multiplo + 1;
            }
            else {
                multiplo = 2;
            }
        }
        const dvEsperado = 11 - (suma % 11);
        dv = dv === 'K' ? '10' : dv;
        dv = dv === '0' ? '11' : dv;
        if (dvEsperado.toString() !== dv && cuerpo.length >= 0)
            return true;
        else
            return false;
    }
    sendEmiterRut(rut) {
        if (!this.validacionRut) {
            switch (this.mode) {
                case 0:
                    this.rut_emiter.emit(this.rutClean(rut));
                    break;
                case 1:
                    let valor = rut;
                    this.rut_emiter.emit(this.rutClean(valor).slice(0, -1));
                    break;
                case 2:
                    this.rut_emiter.emit(rut);
                    break;
                case 3:
                    let r = rut;
                    this.rut_emiter.emit(this.rutClean(r).slice(0, -1) + '-' + r.slice(-1).toUpperCase());
                    break;
                case 4:
                    let ru = rut;
                    this.rut_emiter.emit(this.rutClean(ru).slice(-1).toUpperCase());
                    break;
            }
        }
        else {
            this.rut_emiter.emit(undefined);
        }
    }
}
RutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutComponent, deps: [{ token: i1.RutService }], target: i0.ɵɵFactoryTarget.Component });
RutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: RutComponent, selector: "rut-chile", inputs: { mode: "mode", msjError: "msjError", obligatorio: "obligatorio" }, outputs: { rut_emiter: "rut_emiter" }, ngImport: i0, template: `
  <input type="text"
  [(ngModel)] = "rut_chileno"
  (focus)="rutFormat($event)"
  (keydown)="rutFormat($event)"
  (keypress)="rutFormat($event)"
  (keyup)="validaRUT($event)"
  (blur)="validaRUT($event)"
  class="input-rut rut" name="username" id="rut_chileno" placeholder="Rut">
  <small class="danger-rut" [hidden]="!validacionRut">
      {{msjE}}
  </small>
  `, isInline: true, directives: [{ type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rut-chile',
                    template: `
  <input type="text"
  [(ngModel)] = "rut_chileno"
  (focus)="rutFormat($event)"
  (keydown)="rutFormat($event)"
  (keypress)="rutFormat($event)"
  (keyup)="validaRUT($event)"
  (blur)="validaRUT($event)"
  class="input-rut rut" name="username" id="rut_chileno" placeholder="Rut">
  <small class="danger-rut" [hidden]="!validacionRut">
      {{msjE}}
  </small>
  `,
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.RutService }]; }, propDecorators: { rut_emiter: [{
                type: Output
            }], mode: [{
                type: Input
            }], msjError: [{
                type: Input
            }], obligatorio: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3J1dC1jaGlsZW5vL3NyYy9saWIvcnV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBc0IvRSxNQUFNLE9BQU8sWUFBWTtJQVd2QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBVGhDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBdUMsQ0FBQztRQUd0RSxnQkFBVyxHQUFZLEtBQUssQ0FBQztJQU1RLENBQUM7SUFFL0MsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QyxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFHLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLGdDQUFnQyxDQUFDOztZQUU3QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFXO1FBQ25CLE9BQU8sR0FBRyxLQUFJLEVBQUUsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLENBQUM7SUFDeEQsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFZO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUEwQixDQUFDO1FBRWhELE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDbkIsT0FBTztTQUNSO1FBRUQsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDO1NBQy9DO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDMUIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEYsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFZO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUEwQixDQUFDO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVELENBQUM7SUFFRCxVQUFVLENBQUMsR0FBVztRQUNwQixJQUFJLEtBQUssR0FBVyxHQUFHLENBQUM7UUFDeEIsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFN0IsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFdkMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sS0FBSyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakUsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO2dCQUNoQixRQUFRLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQzthQUN6QjtpQkFBTTtnQkFDTCxRQUFRLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7U0FDRjtRQUVELE1BQU0sVUFBVSxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNwQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDNUIsRUFBRSxHQUFHLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRTVCLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDcEQsT0FBTyxJQUFJLENBQUM7O1lBRVosT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELGFBQWEsQ0FBQyxHQUFXO1FBQ3ZCLElBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDakIsS0FBSyxDQUFDO29CQUNKLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDekMsTUFBTTtnQkFDUixLQUFLLENBQUM7b0JBQ0osSUFBSSxLQUFLLEdBQVcsR0FBRyxDQUFDO29CQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4RCxNQUFNO2dCQUNSLEtBQUssQ0FBQztvQkFDSixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDMUIsTUFBTTtnQkFDUixLQUFLLENBQUM7b0JBQ0YsSUFBSSxDQUFDLEdBQVcsR0FBRyxDQUFDO29CQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7b0JBQ3JGLE1BQU07Z0JBQ1YsS0FBSyxDQUFDO29CQUNKLElBQUksRUFBRSxHQUFXLEdBQUcsQ0FBQztvQkFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO29CQUNoRSxNQUFNO2FBQ1Q7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDakM7SUFFSCxDQUFDOzswR0EvSFUsWUFBWTs4RkFBWixZQUFZLG9LQWhCYjs7Ozs7Ozs7Ozs7O0dBWVQ7NEZBSVUsWUFBWTtrQkFsQnhCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7O0dBWVQ7b0JBQ0QsTUFBTSxFQUFFLEVBQ1A7aUJBQ0Y7aUdBR1csVUFBVTtzQkFBbkIsTUFBTTtnQkFDRSxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUnV0U2VydmljZSB9IGZyb20gJy4vcnV0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdydXQtY2hpbGUnLFxuICB0ZW1wbGF0ZTogYFxuICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICBbKG5nTW9kZWwpXSA9IFwicnV0X2NoaWxlbm9cIlxuICAoZm9jdXMpPVwicnV0Rm9ybWF0KCRldmVudClcIlxuICAoa2V5ZG93bik9XCJydXRGb3JtYXQoJGV2ZW50KVwiXG4gIChrZXlwcmVzcyk9XCJydXRGb3JtYXQoJGV2ZW50KVwiXG4gIChrZXl1cCk9XCJ2YWxpZGFSVVQoJGV2ZW50KVwiXG4gIChibHVyKT1cInZhbGlkYVJVVCgkZXZlbnQpXCJcbiAgY2xhc3M9XCJpbnB1dC1ydXQgcnV0XCIgbmFtZT1cInVzZXJuYW1lXCIgaWQ9XCJydXRfY2hpbGVub1wiIHBsYWNlaG9sZGVyPVwiUnV0XCI+XG4gIDxzbWFsbCBjbGFzcz1cImRhbmdlci1ydXRcIiBbaGlkZGVuXT1cIiF2YWxpZGFjaW9uUnV0XCI+XG4gICAgICB7e21zakV9fVxuICA8L3NtYWxsPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBPdXRwdXQoKSBydXRfZW1pdGVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsID4oKTtcbiAgQElucHV0KCkgbW9kZSE6IG51bWJlcjtcbiAgQElucHV0KCkgbXNqRXJyb3IhOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG9ibGlnYXRvcmlvOiBib29sZWFuID0gZmFsc2U7XG5cbiAgdmFsaWRhY2lvblJ1dCE6IGJvb2xlYW47XG4gIHJ1dF9jaGlsZW5vITogc3RyaW5nO1xuICBtc2pFITpzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBydXRTZXJ2aWNlIDpSdXRTZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJ1dFNlcnZpY2UuZXZlbnRzJC5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICB0aGlzLnJ1dF9jaGlsZW5vID0gJyc7XG4gICAgICAgIHRoaXMucnV0X2VtaXRlci5lbWl0KHRoaXMucnV0X2NoaWxlbm8pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYoIXRoaXMubXNqRXJyb3IpXG4gICAgICB0aGlzLm1zakUgPSBcIkVsIHJ1dCBpbmdyZXNhZG8gbm8gZXMgdsOhbGlkby5cIjtcbiAgICBlbHNlXG4gICAgICB0aGlzLm1zakUgPSB0aGlzLm1zakVycm9yO1xuICB9XG5cbiAgaXNSdXRPYmxpZ2F0b3JpbygpIDogdm9pZCAge1xuICAgIGlmICghdGhpcy5vYmxpZ2F0b3Jpbykge1xuICAgICAgdGhpcy52YWxpZGFjaW9uUnV0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJ1dF9lbWl0ZXIuZW1pdCh1bmRlZmluZWQpO1xuICAgIH0gICBcbiAgfVxuXG4gIGlzUnV0RW1weShydXQ6IHN0cmluZykgOiBib29sZWFuIHtcbiAgICByZXR1cm4gcnV0ID09PScnIHx8IHJ1dCA9PT0gbnVsbCB8fCBydXQgPT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJ1dEZvcm1hdChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIGNvbnN0IHJ1dDogc3RyaW5nID0gdGhpcy5ydXRDbGVhbih0YXJnZXQudmFsdWUpO1xuICAgIGlmIChydXQubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYCR7cnV0LnNsaWNlKC00LCAtMSl9LSR7cnV0LnN1YnN0cihydXQubGVuZ3RoIC0gMSl9YDtcbiAgICBmb3IgKGxldCBpID0gNDsgaSA8IHJ1dC5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgcmVzdWx0ID0gYCR7cnV0LnNsaWNlKC0zIC0gaSwgLWkpfS4ke3Jlc3VsdH1gO1xuICAgIH1cblxuICAgIHRoaXMucnV0X2NoaWxlbm8gPSByZXN1bHQ7ICAgIFxuICAgIGlmICh0aGlzLmlzUnV0RW1weSh0YXJnZXQudmFsdWUpKSB0aGlzLmlzUnV0T2JsaWdhdG9yaW8oKTtcbiAgfVxuXG4gIHJ1dENsZWFuKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUucmVwbGFjZSgvW14wLTlrS10rL2csICcnKS50b1VwcGVyQ2FzZSgpIDogJyc7XG4gIH1cbiAgXG4gIHZhbGlkYVJVVChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnZhbGlkYWNpb25SdXQgPSB0aGlzLnZhbGlkYVJVVF8odGFyZ2V0LnZhbHVlKTtcbiAgICB0aGlzLnJ1dEZvcm1hdChldmVudCk7XG4gICAgdGhpcy5zZW5kRW1pdGVyUnV0KHRoaXMucnV0X2NoaWxlbm8pO1xuICAgIGlmICh0aGlzLmlzUnV0RW1weSh0YXJnZXQudmFsdWUpKSB0aGlzLmlzUnV0T2JsaWdhdG9yaW8oKTtcbiAgfVxuXG4gIHZhbGlkYVJVVF8ocnV0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBsZXQgdmFsb3I6IHN0cmluZyA9IHJ1dDtcbiAgICB2YWxvciA9IHRoaXMucnV0Q2xlYW4odmFsb3IpO1xuICBcbiAgICBjb25zdCBjdWVycG8gPSB2YWxvci5zbGljZSgwLCAtMSk7XG4gICAgbGV0IGR2ID0gdmFsb3Iuc2xpY2UoLTEpLnRvVXBwZXJDYXNlKCk7XG4gIFxuICAgIGlmIChjdWVycG8ubGVuZ3RoIDwgNyAmJiBjdWVycG8ubGVuZ3RoID49IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgXG4gICAgbGV0IHN1bWEgPSAwO1xuICAgIGxldCBtdWx0aXBsbyA9IDI7XG4gIFxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGN1ZXJwby5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW5kZXggPSBtdWx0aXBsbyAqIE51bWJlcih2YWxvci5jaGFyQXQoY3VlcnBvLmxlbmd0aCAtIGkpKTtcbiAgICAgIHN1bWEgPSBzdW1hICsgaW5kZXg7XG4gICAgICBpZiAobXVsdGlwbG8gPCA3KSB7XG4gICAgICAgIG11bHRpcGxvID0gbXVsdGlwbG8gKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbG8gPSAyO1xuICAgICAgfVxuICAgIH1cbiAgXG4gICAgY29uc3QgZHZFc3BlcmFkbyA9IDExIC0gKHN1bWEgJSAxMSk7XG4gICAgZHYgPSBkdiA9PT0gJ0snID8gJzEwJyA6IGR2O1xuICAgIGR2ID0gZHYgPT09ICcwJyA/ICcxMScgOiBkdjtcbiAgXG4gICAgaWYgKGR2RXNwZXJhZG8udG9TdHJpbmcoKSAhPT0gZHYgJiYgY3VlcnBvLmxlbmd0aCA+PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZWxzZSBcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNlbmRFbWl0ZXJSdXQocnV0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZighdGhpcy52YWxpZGFjaW9uUnV0KSB7XG4gICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5ydXRfZW1pdGVyLmVtaXQodGhpcy5ydXRDbGVhbihydXQpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGxldCB2YWxvcjogc3RyaW5nID0gcnV0O1xuICAgICAgICAgIHRoaXMucnV0X2VtaXRlci5lbWl0KHRoaXMucnV0Q2xlYW4odmFsb3IpLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICB0aGlzLnJ1dF9lbWl0ZXIuZW1pdChydXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBsZXQgcjogc3RyaW5nID0gcnV0O1xuICAgICAgICAgICAgdGhpcy5ydXRfZW1pdGVyLmVtaXQodGhpcy5ydXRDbGVhbihyKS5zbGljZSgwLCAtMSkgKyAnLScrIHIuc2xpY2UoLTEpLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgICAgYnJlYWs7ICBcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGxldCBydTogc3RyaW5nID0gcnV0O1xuICAgICAgICAgIHRoaXMucnV0X2VtaXRlci5lbWl0KHRoaXMucnV0Q2xlYW4ocnUpLnNsaWNlKC0xKS50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgICBicmVhazsgICAgXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucnV0X2VtaXRlci5lbWl0KHVuZGVmaW5lZCk7XG4gICAgfVxuICAgICAgXG4gIH1cblxufVxuIl19