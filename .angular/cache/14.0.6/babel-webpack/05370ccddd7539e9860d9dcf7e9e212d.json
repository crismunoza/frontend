{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Output, Input, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\n\nclass RutService {\n  constructor() {\n    this._subject = new Subject();\n  }\n\n  clearInputService(event) {\n    this._subject.next(event);\n  }\n\n  get events$() {\n    return this._subject.asObservable();\n  }\n\n  rutFormat(value) {\n    const rut = this.rutClean(value);\n\n    if (rut.length <= 1) {\n      return;\n    }\n\n    let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n\n    for (let i = 4; i < rut.length; i += 3) {\n      result = `${rut.slice(-3 - i, -i)}.${result}`;\n    }\n\n    return result;\n  }\n\n  rutClean(value) {\n    return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n  }\n\n  validaRUT(rut) {\n    let valor = rut;\n    valor = this.rutClean(valor); // Aislar Cuerpo y Dígito Verificador\n\n    const cuerpo = valor.slice(0, -1);\n    let dv = valor.slice(-1).toUpperCase(); // Si no cumple con el mínimo ej. (n.nnn.nnn)\n\n    if (cuerpo.length < 7 && cuerpo.length >= 0) {\n      return true;\n    } // Calcular Dígito Verificador\n\n\n    let suma = 0;\n    let multiplo = 2; // Para cada dígito del Cuerpo\n\n    for (let i = 1; i <= cuerpo.length; i++) {\n      // Obtener su Producto con el Múltiplo Correspondiente\n      const index = multiplo * Number(valor.charAt(cuerpo.length - i)); // Sumar al Contador General\n\n      suma = suma + index; // Consolidar Múltiplo dentro del rango [2,7]\n\n      if (multiplo < 7) {\n        multiplo = multiplo + 1;\n      } else {\n        multiplo = 2;\n      }\n    } // Calcular Dígito Verificador en base al Módulo 11\n\n\n    const dvEsperado = 11 - suma % 11; // Casos Especiales (0 y K)\n\n    dv = dv === 'K' ? '10' : dv;\n    dv = dv === '0' ? '11' : dv; // Validar que el Cuerpo coincide con su Dígito Verificador\n\n    if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getRutChile(mode, rut) {\n    if (!this.validaRUT(rut)) {\n      switch (mode) {\n        // el rut limpio 184215551\n        case 0:\n          return this.rutClean(rut);\n        // solo el cuerpo del rut  18421555\n\n        case 1:\n          let valor = rut;\n          valor = this.rutClean(valor);\n          let cuerpo = valor.slice(0, -1);\n          return cuerpo;\n        // rut formateado 18.421.555-1\n\n        case 2:\n          return this.rutFormat(rut);\n        // rut cuerpo - digitov : 18421555-1  \n\n        case 3:\n          let r = rut;\n          r = this.rutClean(r);\n          const c = r.slice(0, -1);\n          let dv = r.slice(-1).toUpperCase();\n          return c + '-' + dv;\n\n        case 4:\n          let ru = rut;\n          ru = this.rutClean(ru);\n          let div = ru.slice(-1).toUpperCase();\n          return div;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  validaRutForm(control) {\n    if (control.value == null || control.value === 'undefined' || control.value === \"\") {\n      // TODO: RETORNA TRUE YA QUE LA IDEA ES USAR Validators.required\n      return null;\n    } else {\n      let rut = control.value;\n      let valor = (rut || '').replace(/[^0-9kK]+/g, '').toUpperCase(); // Aislar Cuerpo y Dígito Verificador\n\n      const cuerpo = valor.slice(0, -1);\n      let dv = valor.slice(-1).toUpperCase(); // Si no cumple con el mínimo ej. (n.nnn.nnn)\n\n      if (cuerpo.length < 7 && cuerpo.length >= 0) {\n        return {\n          rutnovalido: true\n        };\n      } // Calcular Dígito Verificador\n\n\n      let suma = 0;\n      let multiplo = 2; // Para cada dígito del Cuerpo\n\n      for (let i = 1; i <= cuerpo.length; i++) {\n        // Obtener su Producto con el Múltiplo Correspondiente\n        const index = multiplo * Number(valor.charAt(cuerpo.length - i)); // Sumar al Contador General\n\n        suma = suma + index; // Consolidar Múltiplo dentro del rango [2,7]\n\n        if (multiplo < 7) {\n          multiplo = multiplo + 1;\n        } else {\n          multiplo = 2;\n        }\n      } // Calcular Dígito Verificador en base al Módulo 11\n\n\n      const dvEsperado = 11 - suma % 11; // Casos Especiales (0 y K)\n\n      dv = dv === 'K' ? '10' : dv;\n      dv = dv === '0' ? '11' : dv; // Validar que el Cuerpo coincide con su Dígito Verificador\n\n      if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {\n        return {\n          rutnovalido: true\n        };\n      } else {\n        return null;\n      }\n    }\n  }\n\n  getRutChileForm(mode, rut) {\n    switch (mode) {\n      case 0:\n        // el rut limpio 184215551\n        return this.rutClean(rut);\n\n      case 1:\n        // rut formateado 18.421.555-1\n        return this.rutFormat(rut);\n\n      case 2:\n        // rut cuerpo - digitov : 18421555-1 \n        let r = rut;\n        r = this.rutClean(r);\n        const c = r.slice(0, -1);\n        let dv = r.slice(-1).toUpperCase();\n        return c + '-' + dv;\n    }\n  }\n\n  isRutEmpy(rut) {\n    return rut === '' || rut === null || rut === undefined;\n  }\n\n}\n\nRutService.ɵfac = function RutService_Factory(t) {\n  return new (t || RutService)();\n};\n\nRutService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RutService,\n  factory: RutService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RutService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass RutComponent {\n  constructor(rutService) {\n    this.rutService = rutService;\n    this.rut_emiter = new EventEmitter();\n    this.obligatorio = false;\n  }\n\n  ngOnInit() {\n    this.rutService.events$.forEach(event => {\n      if (event) {\n        this.rut_chileno = '';\n        this.rut_emiter.emit(this.rut_chileno);\n      }\n    });\n    if (!this.msjError) this.msjE = \"El rut ingresado no es válido.\";else this.msjE = this.msjError;\n  }\n\n  isRutObligatorio() {\n    if (!this.obligatorio) {\n      this.validacionRut = false;\n      this.rut_emiter.emit(undefined);\n    }\n  }\n\n  isRutEmpy(rut) {\n    return rut === '' || rut === null || rut === undefined;\n  }\n\n  rutFormat(event) {\n    const target = event.target;\n    const rut = this.rutClean(target.value);\n\n    if (rut.length <= 1) {\n      return;\n    }\n\n    let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n\n    for (let i = 4; i < rut.length; i += 3) {\n      result = `${rut.slice(-3 - i, -i)}.${result}`;\n    }\n\n    this.rut_chileno = result;\n    if (this.isRutEmpy(target.value)) this.isRutObligatorio();\n  }\n\n  rutClean(value) {\n    return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n  }\n\n  validaRUT(event) {\n    const target = event.target;\n    this.validacionRut = this.validaRUT_(target.value);\n    this.rutFormat(event);\n    this.sendEmiterRut(this.rut_chileno);\n    if (this.isRutEmpy(target.value)) this.isRutObligatorio();\n  }\n\n  validaRUT_(rut) {\n    let valor = rut;\n    valor = this.rutClean(valor);\n    const cuerpo = valor.slice(0, -1);\n    let dv = valor.slice(-1).toUpperCase();\n\n    if (cuerpo.length < 7 && cuerpo.length >= 0) {\n      return true;\n    }\n\n    let suma = 0;\n    let multiplo = 2;\n\n    for (let i = 1; i <= cuerpo.length; i++) {\n      const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n      suma = suma + index;\n\n      if (multiplo < 7) {\n        multiplo = multiplo + 1;\n      } else {\n        multiplo = 2;\n      }\n    }\n\n    const dvEsperado = 11 - suma % 11;\n    dv = dv === 'K' ? '10' : dv;\n    dv = dv === '0' ? '11' : dv;\n    if (dvEsperado.toString() !== dv && cuerpo.length >= 0) return true;else return false;\n  }\n\n  sendEmiterRut(rut) {\n    if (!this.validacionRut) {\n      switch (this.mode) {\n        case 0:\n          this.rut_emiter.emit(this.rutClean(rut));\n          break;\n\n        case 1:\n          let valor = rut;\n          this.rut_emiter.emit(this.rutClean(valor).slice(0, -1));\n          break;\n\n        case 2:\n          this.rut_emiter.emit(rut);\n          break;\n\n        case 3:\n          let r = rut;\n          this.rut_emiter.emit(this.rutClean(r).slice(0, -1) + '-' + r.slice(-1).toUpperCase());\n          break;\n\n        case 4:\n          let ru = rut;\n          this.rut_emiter.emit(this.rutClean(ru).slice(-1).toUpperCase());\n          break;\n      }\n    } else {\n      this.rut_emiter.emit(undefined);\n    }\n  }\n\n}\n\nRutComponent.ɵfac = function RutComponent_Factory(t) {\n  return new (t || RutComponent)(i0.ɵɵdirectiveInject(RutService));\n};\n\nRutComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RutComponent,\n  selectors: [[\"rut-chile\"]],\n  inputs: {\n    mode: \"mode\",\n    msjError: \"msjError\",\n    obligatorio: \"obligatorio\"\n  },\n  outputs: {\n    rut_emiter: \"rut_emiter\"\n  },\n  decls: 3,\n  vars: 3,\n  consts: [[\"type\", \"text\", \"name\", \"username\", \"id\", \"rut_chileno\", \"placeholder\", \"Rut\", 1, \"input-rut\", \"rut\", 3, \"ngModel\", \"ngModelChange\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"blur\"], [1, \"danger-rut\", 3, \"hidden\"]],\n  template: function RutComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"input\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function RutComponent_Template_input_ngModelChange_0_listener($event) {\n        return ctx.rut_chileno = $event;\n      })(\"focus\", function RutComponent_Template_input_focus_0_listener($event) {\n        return ctx.rutFormat($event);\n      })(\"keydown\", function RutComponent_Template_input_keydown_0_listener($event) {\n        return ctx.rutFormat($event);\n      })(\"keypress\", function RutComponent_Template_input_keypress_0_listener($event) {\n        return ctx.rutFormat($event);\n      })(\"keyup\", function RutComponent_Template_input_keyup_0_listener($event) {\n        return ctx.validaRUT($event);\n      })(\"blur\", function RutComponent_Template_input_blur_0_listener($event) {\n        return ctx.validaRUT($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(1, \"small\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngModel\", ctx.rut_chileno);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", !ctx.validacionRut);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.msjE, \" \");\n    }\n  },\n  dependencies: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RutComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rut-chile',\n      template: `\n  <input type=\"text\"\n  [(ngModel)] = \"rut_chileno\"\n  (focus)=\"rutFormat($event)\"\n  (keydown)=\"rutFormat($event)\"\n  (keypress)=\"rutFormat($event)\"\n  (keyup)=\"validaRUT($event)\"\n  (blur)=\"validaRUT($event)\"\n  class=\"input-rut rut\" name=\"username\" id=\"rut_chileno\" placeholder=\"Rut\">\n  <small class=\"danger-rut\" [hidden]=\"!validacionRut\">\n      {{msjE}}\n  </small>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [{\n      type: RutService\n    }];\n  }, {\n    rut_emiter: [{\n      type: Output\n    }],\n    mode: [{\n      type: Input\n    }],\n    msjError: [{\n      type: Input\n    }],\n    obligatorio: [{\n      type: Input\n    }]\n  });\n})();\n\nclass RutModule {}\n\nRutModule.ɵfac = function RutModule_Factory(t) {\n  return new (t || RutModule)();\n};\n\nRutModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RutModule\n});\nRutModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RutModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RutComponent],\n      imports: [FormsModule],\n      exports: [RutComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of rut\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RutComponent, RutModule, RutService };","map":{"version":3,"names":["i0","Injectable","EventEmitter","Component","Output","Input","NgModule","Subject","i2","FormsModule","RutService","constructor","_subject","clearInputService","event","next","events$","asObservable","rutFormat","value","rut","rutClean","length","result","slice","substr","i","replace","toUpperCase","validaRUT","valor","cuerpo","dv","suma","multiplo","index","Number","charAt","dvEsperado","toString","getRutChile","mode","r","c","ru","div","validaRutForm","control","rutnovalido","getRutChileForm","isRutEmpy","undefined","ɵfac","ɵprov","type","args","providedIn","RutComponent","rutService","rut_emiter","obligatorio","ngOnInit","forEach","rut_chileno","emit","msjError","msjE","isRutObligatorio","validacionRut","target","validaRUT_","sendEmiterRut","ɵcmp","DefaultValueAccessor","NgControlStatus","NgModel","selector","template","styles","RutModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["C:/portafolio/plantilla-master/plantilla-master/plantilla/frontend/node_modules/rut-chileno/fesm2020/rut-chileno.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Output, Input, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\n\nclass RutService {\n    constructor() {\n        this._subject = new Subject();\n    }\n    clearInputService(event) {\n        this._subject.next(event);\n    }\n    get events$() {\n        return this._subject.asObservable();\n    }\n    rutFormat(value) {\n        const rut = this.rutClean(value);\n        if (rut.length <= 1) {\n            return;\n        }\n        let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n        for (let i = 4; i < rut.length; i += 3) {\n            result = `${rut.slice(-3 - i, -i)}.${result}`;\n        }\n        return result;\n    }\n    rutClean(value) {\n        return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n    }\n    validaRUT(rut) {\n        let valor = rut;\n        valor = this.rutClean(valor);\n        // Aislar Cuerpo y Dígito Verificador\n        const cuerpo = valor.slice(0, -1);\n        let dv = valor.slice(-1).toUpperCase();\n        // Si no cumple con el mínimo ej. (n.nnn.nnn)\n        if (cuerpo.length < 7 && cuerpo.length >= 0) {\n            return true;\n        }\n        // Calcular Dígito Verificador\n        let suma = 0;\n        let multiplo = 2;\n        // Para cada dígito del Cuerpo\n        for (let i = 1; i <= cuerpo.length; i++) {\n            // Obtener su Producto con el Múltiplo Correspondiente\n            const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n            // Sumar al Contador General\n            suma = suma + index;\n            // Consolidar Múltiplo dentro del rango [2,7]\n            if (multiplo < 7) {\n                multiplo = multiplo + 1;\n            }\n            else {\n                multiplo = 2;\n            }\n        }\n        // Calcular Dígito Verificador en base al Módulo 11\n        const dvEsperado = 11 - (suma % 11);\n        // Casos Especiales (0 y K)\n        dv = dv === 'K' ? '10' : dv;\n        dv = dv === '0' ? '11' : dv;\n        // Validar que el Cuerpo coincide con su Dígito Verificador\n        if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getRutChile(mode, rut) {\n        if (!this.validaRUT(rut)) {\n            switch (mode) {\n                // el rut limpio 184215551\n                case 0:\n                    return this.rutClean(rut);\n                // solo el cuerpo del rut  18421555\n                case 1:\n                    let valor = rut;\n                    valor = this.rutClean(valor);\n                    let cuerpo = valor.slice(0, -1);\n                    return cuerpo;\n                // rut formateado 18.421.555-1\n                case 2:\n                    return this.rutFormat(rut);\n                // rut cuerpo - digitov : 18421555-1  \n                case 3:\n                    let r = rut;\n                    r = this.rutClean(r);\n                    const c = r.slice(0, -1);\n                    let dv = r.slice(-1).toUpperCase();\n                    return c + '-' + dv;\n                case 4:\n                    let ru = rut;\n                    ru = this.rutClean(ru);\n                    let div = ru.slice(-1).toUpperCase();\n                    return div;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    validaRutForm(control) {\n        if (control.value == null || control.value === 'undefined' || control.value === \"\") {\n            // TODO: RETORNA TRUE YA QUE LA IDEA ES USAR Validators.required\n            return null;\n        }\n        else {\n            let rut = control.value;\n            let valor = (rut || '').replace(/[^0-9kK]+/g, '').toUpperCase();\n            // Aislar Cuerpo y Dígito Verificador\n            const cuerpo = valor.slice(0, -1);\n            let dv = valor.slice(-1).toUpperCase();\n            // Si no cumple con el mínimo ej. (n.nnn.nnn)\n            if (cuerpo.length < 7 && cuerpo.length >= 0) {\n                return {\n                    rutnovalido: true\n                };\n            }\n            // Calcular Dígito Verificador\n            let suma = 0;\n            let multiplo = 2;\n            // Para cada dígito del Cuerpo\n            for (let i = 1; i <= cuerpo.length; i++) {\n                // Obtener su Producto con el Múltiplo Correspondiente\n                const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n                // Sumar al Contador General\n                suma = suma + index;\n                // Consolidar Múltiplo dentro del rango [2,7]\n                if (multiplo < 7) {\n                    multiplo = multiplo + 1;\n                }\n                else {\n                    multiplo = 2;\n                }\n            }\n            // Calcular Dígito Verificador en base al Módulo 11\n            const dvEsperado = 11 - (suma % 11);\n            // Casos Especiales (0 y K)\n            dv = dv === 'K' ? '10' : dv;\n            dv = dv === '0' ? '11' : dv;\n            // Validar que el Cuerpo coincide con su Dígito Verificador\n            if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {\n                return {\n                    rutnovalido: true\n                };\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    getRutChileForm(mode, rut) {\n        switch (mode) {\n            case 0: // el rut limpio 184215551\n                return this.rutClean(rut);\n            case 1: // rut formateado 18.421.555-1\n                return this.rutFormat(rut);\n            case 2: // rut cuerpo - digitov : 18421555-1 \n                let r = rut;\n                r = this.rutClean(r);\n                const c = r.slice(0, -1);\n                let dv = r.slice(-1).toUpperCase();\n                return c + '-' + dv;\n        }\n    }\n    isRutEmpy(rut) {\n        return rut === '' || rut === null || rut === undefined;\n    }\n}\nRutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass RutComponent {\n    constructor(rutService) {\n        this.rutService = rutService;\n        this.rut_emiter = new EventEmitter();\n        this.obligatorio = false;\n    }\n    ngOnInit() {\n        this.rutService.events$.forEach(event => {\n            if (event) {\n                this.rut_chileno = '';\n                this.rut_emiter.emit(this.rut_chileno);\n            }\n        });\n        if (!this.msjError)\n            this.msjE = \"El rut ingresado no es válido.\";\n        else\n            this.msjE = this.msjError;\n    }\n    isRutObligatorio() {\n        if (!this.obligatorio) {\n            this.validacionRut = false;\n            this.rut_emiter.emit(undefined);\n        }\n    }\n    isRutEmpy(rut) {\n        return rut === '' || rut === null || rut === undefined;\n    }\n    rutFormat(event) {\n        const target = event.target;\n        const rut = this.rutClean(target.value);\n        if (rut.length <= 1) {\n            return;\n        }\n        let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n        for (let i = 4; i < rut.length; i += 3) {\n            result = `${rut.slice(-3 - i, -i)}.${result}`;\n        }\n        this.rut_chileno = result;\n        if (this.isRutEmpy(target.value))\n            this.isRutObligatorio();\n    }\n    rutClean(value) {\n        return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n    }\n    validaRUT(event) {\n        const target = event.target;\n        this.validacionRut = this.validaRUT_(target.value);\n        this.rutFormat(event);\n        this.sendEmiterRut(this.rut_chileno);\n        if (this.isRutEmpy(target.value))\n            this.isRutObligatorio();\n    }\n    validaRUT_(rut) {\n        let valor = rut;\n        valor = this.rutClean(valor);\n        const cuerpo = valor.slice(0, -1);\n        let dv = valor.slice(-1).toUpperCase();\n        if (cuerpo.length < 7 && cuerpo.length >= 0) {\n            return true;\n        }\n        let suma = 0;\n        let multiplo = 2;\n        for (let i = 1; i <= cuerpo.length; i++) {\n            const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n            suma = suma + index;\n            if (multiplo < 7) {\n                multiplo = multiplo + 1;\n            }\n            else {\n                multiplo = 2;\n            }\n        }\n        const dvEsperado = 11 - (suma % 11);\n        dv = dv === 'K' ? '10' : dv;\n        dv = dv === '0' ? '11' : dv;\n        if (dvEsperado.toString() !== dv && cuerpo.length >= 0)\n            return true;\n        else\n            return false;\n    }\n    sendEmiterRut(rut) {\n        if (!this.validacionRut) {\n            switch (this.mode) {\n                case 0:\n                    this.rut_emiter.emit(this.rutClean(rut));\n                    break;\n                case 1:\n                    let valor = rut;\n                    this.rut_emiter.emit(this.rutClean(valor).slice(0, -1));\n                    break;\n                case 2:\n                    this.rut_emiter.emit(rut);\n                    break;\n                case 3:\n                    let r = rut;\n                    this.rut_emiter.emit(this.rutClean(r).slice(0, -1) + '-' + r.slice(-1).toUpperCase());\n                    break;\n                case 4:\n                    let ru = rut;\n                    this.rut_emiter.emit(this.rutClean(ru).slice(-1).toUpperCase());\n                    break;\n            }\n        }\n        else {\n            this.rut_emiter.emit(undefined);\n        }\n    }\n}\nRutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutComponent, deps: [{ token: RutService }], target: i0.ɵɵFactoryTarget.Component });\nRutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: RutComponent, selector: \"rut-chile\", inputs: { mode: \"mode\", msjError: \"msjError\", obligatorio: \"obligatorio\" }, outputs: { rut_emiter: \"rut_emiter\" }, ngImport: i0, template: `\n  <input type=\"text\"\n  [(ngModel)] = \"rut_chileno\"\n  (focus)=\"rutFormat($event)\"\n  (keydown)=\"rutFormat($event)\"\n  (keypress)=\"rutFormat($event)\"\n  (keyup)=\"validaRUT($event)\"\n  (blur)=\"validaRUT($event)\"\n  class=\"input-rut rut\" name=\"username\" id=\"rut_chileno\" placeholder=\"Rut\">\n  <small class=\"danger-rut\" [hidden]=\"!validacionRut\">\n      {{msjE}}\n  </small>\n  `, isInline: true, directives: [{ type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rut-chile',\n                    template: `\n  <input type=\"text\"\n  [(ngModel)] = \"rut_chileno\"\n  (focus)=\"rutFormat($event)\"\n  (keydown)=\"rutFormat($event)\"\n  (keypress)=\"rutFormat($event)\"\n  (keyup)=\"validaRUT($event)\"\n  (blur)=\"validaRUT($event)\"\n  class=\"input-rut rut\" name=\"username\" id=\"rut_chileno\" placeholder=\"Rut\">\n  <small class=\"danger-rut\" [hidden]=\"!validacionRut\">\n      {{msjE}}\n  </small>\n  `,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return [{ type: RutService }]; }, propDecorators: { rut_emiter: [{\n                type: Output\n            }], mode: [{\n                type: Input\n            }], msjError: [{\n                type: Input\n            }], obligatorio: [{\n                type: Input\n            }] } });\n\nclass RutModule {\n}\nRutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutModule, declarations: [RutComponent], imports: [FormsModule], exports: [RutComponent] });\nRutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutModule, imports: [[\n            FormsModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: RutModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        RutComponent\n                    ],\n                    imports: [\n                        FormsModule\n                    ],\n                    exports: [\n                        RutComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of rut\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RutComponent, RutModule, RutService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}